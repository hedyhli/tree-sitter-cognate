Let Ignored List ("If" "+" "-" "*" "/" ">" "<" "<=" ">=" "==" "!=" "^" "Not" "And" "Or" "Xor" "List" "Number" "Box" "True" "False" "Number!" "String!" "List!" "Block!" "Symbol!" "Boolean!" "Box!" "Io!" "Any!" "Number?" "String?" "List?" "Block?" "Symbol?" "Boolean?" "Box?" "Io?" "Any?" "For" "While" "Let" "Def" "When" "Case" "Unless" "Do" "With" "Set" "Take-while" "Until");
Let Include List ("Drop" "Prepend" "Index" "All" "Discard" "None" "Append" "Swap" "Fold" "Prints" "Times" "Range" "Twin" "Take" "Triplet" "Min" "Reverse" "Filter" "Max" "Map" "Puts" "Sort" "Assert" "Length" "Of");

Def Get-name as Regex-match of "^\\{\\.name=\"(.+)\"";
Def In as (Let L; Let X; Not None (== X) in L);

Def Filter-map (
	Let Exclude;
	Def Pred;
	Let L be a List!;

    Empty;
	For each in L (
		Let Item;
		Let R be Pred Item;
		When != Exclude R ( Push R );
	);
	Reverse;
);

~
String-map (do something on each char) "full string" "";
~
Def String-map (
	Let F as Block!;
	Let S;
	Let I;

	Do Case (Not == "") then (
		First;
		Do F;
		Join I;
		String-map F Rest S;
	) else (Drop; I) S;
);

With \read "builtins.c" (
    Read-file;
    Split on "\n";

    Filter-map for \ignore (
        Let Matched be Get-name;
        Do If Not Matched then (\ignore it)
        else (
            Twin;
            Swap Rest;
            Join Uppercase First;
        );
    );
    Filter by (Not In Ignored);
);

Append Include list;
Triplet;

Let Size be Length;

~~ Scheme/elisp syntax lists
For Swap (
    Join Swap "\"";
    Join "\"";
    Put;
    Put " ";
);

Print "";

~~ Regex patterns for Helix
Let I Box 0;
Put "\"^(";
For Swap (
	Set I be + Unbox I 1;

	Let Name;
	String-map
		Case (Or == "?" Swap == "." Twin) then (Join "\\\\")
		else () Name from "";

    Put;
	Unless == Unbox I eq Size (
	    Put "|";
	);
);
Put ")$\"";

